Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"
Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"
Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contain only digits 0-9.
Both num1 and num2 do not contain any leading zero, except the number 0 itself.
You must not use any built-in BigInteger library or convert the inputs to integer directly.


class Solution(object):
    def multiply(self, nums1, nums2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        product = [0] * (len(nums1) + len(nums2))
        pos = len(product) -1
        
        for n1 in reversed(nums1):
            temp = pos
            for n2 in reversed(nums2):
                product[temp] += (ord(n1) - ord('0')) * (ord(n2) - ord('0'))
                product[temp-1] += product[temp] // 10
                product[temp] %=  10
                temp -= 1
            pos -= 1
        i = 0
        while i < len(product)-1 and product[i]  ==0:
            i+=1
        
        return ''.join((map(str,product[i:])))
                
